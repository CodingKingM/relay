//generated by ai to debug
// Add this at the beginning of your PostItem component to debug
import { useState } from 'react'
import { Link } from 'react-router-dom'
import { useApiCall } from '../../hooks/useApi'
import CommentList from './CommentList'
import CommentForm from './CommentForm'

function PostItem({ post, currentUser, onDelete }) {
    // DEBUG: Log the post object to see what's actually there
    console.log('PostItem received post:', post);
    console.log('authorUsername:', post.authorUsername);
    console.log('author:', post.author);

    const [liked, setLiked] = useState(post.isLikedByCurrentUser)
    const [likeCount, setLikeCount] = useState(post.likeCount)
    const [loading, setLoading] = useState(false)
    const { call } = useApiCall()
    const [showComments, setShowComments] = useState(false)
    const [refreshComments, setRefreshComments] = useState(0)

    const sanitizeTimestamp = (ts) => {
        return ts.replace(/(\.\d{3})\d+/, '$1')
    }

    const formatDate = (timestamp) => {
        const safeTs = sanitizeTimestamp(timestamp)
        const date   = new Date(safeTs)
        if (isNaN(date)) return timestamp

        const now     = new Date()
        const diffMs  = now - date
        const diffMins  = Math.floor(diffMs / 60000)

        if (diffMins < 1) return 'just now'
        if (diffMins < 60) return `${diffMins}m ago`

        const diffHours = Math.floor(diffMins / 60)
        if (diffHours < 24) return `${diffHours}h ago`

        const diffDays = Math.floor(diffHours / 24)
        if (diffDays < 7) return `${diffDays}d ago`

        return date.toLocaleDateString()
    }

    const handleLike = async () => {
        if (loading) return
        setLoading(true)

        try {
            if (liked) {
                await call(`/posts/${post.id}/like`, 'DELETE')
                setLiked(false)
                setLikeCount(prev => Math.max(0, prev - 1))
            } else {
                await call(`/posts/${post.id}/like`, 'POST')
                setLiked(true)
                setLikeCount(prev => prev + 1)
            }
        } catch (err) {
            console.error('Failed to toggle like:', err)
        } finally {
            setLoading(false)
        }
    }

    const handleDelete = async () => {
        if (loading) return
        if (!window.confirm('Are you sure you want to delete this post?')) return
        setLoading(true)
        try {
            await call(`/posts/${post.id}`, 'DELETE')
            if (typeof onDelete === 'function') {
                onDelete(post.id)
            }
        } catch (err) {
            if (err.message && err.message.toLowerCase().includes('not found')) {
                if (typeof onDelete === 'function') {
                    onDelete(post.id)
                }
            } else {
                alert('Failed to delete post: ' + err.message)
            }
        } finally {
            setLoading(false)
        }
    }

    // Use authorUsername from the backend
    const authorName = post.authorUsername || post.author || 'Unknown'
    const isOwnPost = currentUser === authorName

    return (
        <div className="post-item" style={{ position: 'relative' }}>
            <span
                className="post-timestamp"
                style={{ position: 'absolute', top: '1rem', right: '1rem', color: '#7f8c8d', fontSize: '0.95rem', zIndex: 2 }}
            >
                {formatDate(post.createdAt)}
            </span>
            <div className="post-header">
                <Link to={`/user/${authorName}`} className="post-author">
                    {authorName}
                </Link>
            </div>

            <div className="post-content">{post.content}</div>

            <div className="post-actions">
                <button
                    className={`like-button ${liked ? 'liked' : ''}`}
                    onClick={handleLike}
                    disabled={loading || isOwnPost}
                    title={isOwnPost ? "You can't like your own posts" : ""}
                >
                    <span>{liked ? '‚ù§Ô∏è' : 'ü§ç'}</span>
                    <span>
                        {likeCount} {likeCount === 1 ? 'like' : 'likes'}
                    </span>
                </button>
                <button
                    className="toggle-comments-button"
                    onClick={() => setShowComments(v => !v)}
                >
                    Comments
                </button>
                {isOwnPost && (
                    <button
                        className="delete-post-button"
                        onClick={handleDelete}
                        disabled={loading}
                        title="Delete this post"
                        style={{ marginLeft: '0.3rem' }}
                    >
                        üóëÔ∏è
                    </button>
                )}
            </div>
            {showComments && (
                <div className="comments-section" style={{ marginTop: '1rem' }}>
                    <CommentForm postId={post.id} onCommentAdded={() => setRefreshComments(c => c + 1)} />
                    <CommentList postId={post.id} currentUser={currentUser} refresh={refreshComments} />
                </div>
            )}
        </div>
    )
}

export default PostItem